// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class dlfcn_h  {

    /* package-private */ dlfcn_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _DLFCN_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)31L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __LONG_DOUBLE_USES_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int RTLD_LAZY() {
        return (int)1L;
    }
    public static int RTLD_NOW() {
        return (int)2L;
    }
    public static int RTLD_BINDING_MASK() {
        return (int)3L;
    }
    public static int RTLD_NOLOAD() {
        return (int)4L;
    }
    public static int RTLD_DEEPBIND() {
        return (int)8L;
    }
    public static int RTLD_GLOBAL() {
        return (int)256L;
    }
    public static int RTLD_LOCAL() {
        return (int)0L;
    }
    public static int RTLD_NODELETE() {
        return (int)4096L;
    }
    public static MethodHandle dlopen$MH() {
        return RuntimeHelper.requireNonNull(constants$0.dlopen$MH,"dlopen");
    }
    public static MemoryAddress dlopen ( Addressable __file,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlopen$MH, "dlopen");
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dlclose$MH() {
        return RuntimeHelper.requireNonNull(constants$0.dlclose$MH,"dlclose");
    }
    public static int dlclose ( Addressable __handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlclose$MH, "dlclose");
        try {
            return (int)mh$.invokeExact(__handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dlsym$MH() {
        return RuntimeHelper.requireNonNull(constants$0.dlsym$MH,"dlsym");
    }
    public static MemoryAddress dlsym ( Addressable __handle,  Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlsym$MH, "dlsym");
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__handle, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dlerror$MH() {
        return RuntimeHelper.requireNonNull(constants$0.dlerror$MH,"dlerror");
    }
    public static MemoryAddress dlerror () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlerror$MH, "dlerror");
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
}


